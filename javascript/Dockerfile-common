# Used arguments:
#  NODE_ENV - production by default, if it set to "development" npm will install the devDependencies also
#  SERVICE_SOURCE_SUBDIR - defines the subdir, where the root of the node.js source located to build
#  DEBUG - debug argument for the node.js module, debug.

# Directory structure for this container
#  /home/app - the executing user's home directory
#  /home/app/service - the application code will be copied here
#  /home/app/node_modules - external npm modules will be installed here
#  /home/app/lib - the shared js modules will be copied here

FROM node:boron-alpine
LABEL com.ssp-game.description="A common dockerfile to create node.js services using a common lib subdir as shared libraries." \
      com.ssp-game.version="1.0.0" \
      com.ssp-game.author="Daniel Hatas <samson84@gmail.com>"

# -- Operating system dependencies and environmentr --

# Update the package manager's repo and install dependencies needed for NPM modules.
# Creates an app user to not execute the app as root, for security reason.
# Creates the subdirs under the service and lib
# Python and compiler dependencies are needed beacuse of the autobahn wamp module.

RUN apk update && apk add python make g++ \
    && addgroup -S app && adduser -S -g app app \
    && mkdir /home/app/service \
    && mkdir /home/app/lib \
    && chown -R app:app /home/app/*

# -- Node.js application dependencies and enironment --

# Arguments defined during the build, needed only for the next layers
ARG NODE_ENV=production
ARG SERVICE_SOURCE_SUBDIR

# Install app and lib npm dependencies using the source's and lib's package.json
# This layer will be cached for building this part of the image, dependenies changes rarer than
# the application and a the lib source code.
COPY ./lib/package.json /home/app/lib/
RUN chown -R app:app /home/app/*
USER app
RUN cd /home/app/lib && npm install
COPY ./$SERVICE_SOURCE_SUBDIR/package.json /home/app/
USER root
RUN chown -R app:app /home/app/*
USER app
RUN cd /home/app && npm install

# -- Source code --

# copy the source code as root, set the ownership and switch user.
COPY ./$SERVICE_SOURCE_SUBDIR /home/app/service
COPY ./lib /home/app/lib
USER root
RUN chown -R app:app /home/app/*
USER app

# -- Execution --
# Grab the execution related arguments if exists
ARG DEBUG
ARG NODE_LOG_LEVEL
RUN printenv
WORKDIR /home/app/service

# set the default command, not using NPM because it is not forward the signals to
# the application, so we execute the service directly using node.
CMD [ "node", "service.js" ]
